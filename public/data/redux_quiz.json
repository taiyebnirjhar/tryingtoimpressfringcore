[
  {
    "id": 1,
    "question": "What is Redux, and why would you use it in a React application?",
    "options": {
      "first": "Redux is a database management system for React applications.",
      "second": "Redux is a state management library for JavaScript applications, particularly useful in managing the state of React applications.",
      "third": "Redux is a design pattern for creating responsive user interfaces.",
      "fourth": "Redux is a styling framework for React components."
    },
    "correctAnswer": "second"
  },
  {
    "id": 2,
    "question": "Explain the three principles of Redux.",
    "options": {
      "first": "Actions, Reducers, and Selectors.",
      "second": "Single Source of Truth, State is Read-Only, and Changes are Made with Pure Functions.",
      "third": "Provider, Connect, and Middleware.",
      "fourth": "Dispatch, Subscribe, and State."
    },
    "correctAnswer": "second"
  },
  {
    "id": 3,
    "question": "What is an action in Redux?",
    "options": {
      "first": "Actions are functions that handle side effects in Redux.",
      "second": "Actions are objects that describe a change in state.",
      "third": "Actions are asynchronous operations in Redux.",
      "fourth": "Actions are specific to React and cannot be used outside of it."
    },
    "correctAnswer": "second"
  },
  {
    "id": 4,
    "question": "What is a reducer in Redux?",
    "options": {
      "first": "Reducers are functions that handle side effects in Redux.",
      "second": "Reducers are pure functions that specify how the state changes in response to an action.",
      "third": "Reducers are asynchronous operations in Redux.",
      "fourth": "Reducers are specific to React and cannot be used outside of it."
    },
    "correctAnswer": "second"
  },
  {
    "id": 5,
    "question": "How does the 'connect' function work in React Redux?",
    "options": {
      "first": "Connect is used for creating actions in Redux.",
      "second": "Connect is a middleware for handling asynchronous operations in Redux.",
      "third": "Connect is a function that connects a React component to the Redux store.",
      "fourth": "Connect is a replacement for the 'useState' hook."
    },
    "correctAnswer": "third"
  },
  {
    "id": 6,
    "question": "What is the purpose of the 'dispatch' function in Redux?",
    "options": {
      "first": "Dispatch is used to create reusable components with dynamic types.",
      "second": "Dispatch is used to send actions to the Redux store.",
      "third": "Dispatch is a function that handles side effects in Redux.",
      "fourth": "Dispatch is only applicable to class components."
    },
    "correctAnswer": "second"
  },
  {
    "id": 7,
    "question": "Explain the role of the 'Provider' component in React Redux.",
    "options": {
      "first": "Provider is used for handling side effects in a React component.",
      "second": "Provider is a component that makes the Redux store available to the entire React component tree.",
      "third": "Provider is a middleware for handling asynchronous operations in Redux.",
      "fourth": "Provider is only used in class components."
    },
    "correctAnswer": "second"
  },
  {
    "id": 8,
    "question": "What is middleware in Redux, and why might you use it?",
    "options": {
      "first": "Middleware is a library for styling components in Redux.",
      "second": "Middleware is a way to extend the behavior of the 'dispatch' function in Redux.",
      "third": "Middleware is used for managing and updating global state in an application.",
      "fourth": "Middleware is a deprecated feature in Redux."
    },
    "correctAnswer": "second"
  },
  {
    "id": 9,
    "question": "Explain the purpose of 'selectors' in Redux.",
    "options": {
      "first": "Selectors are functions that handle side effects in Redux.",
      "second": "Selectors are functions that extract specific pieces of data from the Redux store.",
      "third": "Selectors are specific to React and cannot be used outside of it.",
      "fourth": "Selectors are used for creating actions in Redux."
    },
    "correctAnswer": "second"
  },
  {
    "id": 10,
    "question": "How does Redux differ from local component state in React?",
    "options": {
      "first": "Redux is only applicable to class components.",
      "second": "Local component state is used for managing state within a single component, while Redux provides a global state management solution.",
      "third": "Redux is a replacement for the 'useReducer' hook.",
      "fourth": "Local component state and Redux are interchangeable and can be used together."
    },
    "correctAnswer": "second"
  },
  {
    "id": 11,
    "question": "Explain the concept of 'asynchronous actions' in Redux and how they are typically handled.",
    "options": {
      "first": "Asynchronous actions refer to actions that can only be handled in class components.",
      "second": "Asynchronous actions are actions that involve fetching data or other asynchronous operations.",
      "third": "Asynchronous actions are only applicable to functional components.",
      "fourth": "Asynchronous actions are a deprecated feature in Redux."
    },
    "correctAnswer": "second"
  },
  {
    "id": 12,
    "question": "What is the purpose of the 'redux-thunk' middleware?",
    "options": {
      "first": "Redux Thunk is a styling framework for Redux components.",
      "second": "Redux Thunk is used for handling side effects in a React component.",
      "third": "Redux Thunk is a middleware that allows action creators to return functions instead of plain objects.",
      "fourth": "Redux Thunk is exclusive to class components."
    },
    "correctAnswer": "third"
  },
  {
    "id": 13,
    "question": "Explain the role of 'action creators' in Redux.",
    "options": {
      "first": "Action creators are functions that handle side effects in Redux.",
      "second": "Action creators are functions that create and return action objects.",
      "third": "Action creators are used for creating actions in React.",
      "fourth": "Action creators are a replacement for the 'useState' hook."
    },
    "correctAnswer": "second"
  },
  {
    "id": 14,
    "question": "What is the purpose of the 'combineReducers' function in Redux?",
    "options": {
      "first": "combineReducers is a middleware for handling asynchronous operations in Redux.",
      "second": "combineReducers is used to combine multiple reducers into a single reducer function.",
      "third": "combineReducers is a replacement for the 'Provider' component.",
      "fourth": "combineReducers is specific to React and cannot be used outside of it."
    },
    "correctAnswer": "second"
  },
  {
    "id": 15,
    "question": "Explain the concept of 'immutability' in the context of Redux.",
    "options": {
      "first": "Immutability refers to the ability to directly mutate the state in Redux.",
      "second": "Immutability is not relevant in Redux.",
      "third": "Immutability means that the state cannot be changed directly; instead, a new state object is created.",
      "fourth": "Immutability is a concept only applicable to class components."
    },
    "correctAnswer": "third"
  },
  {
    "id": 16,
    "question": "How does Redux handle application side effects, and what middleware can be used for this purpose?",
    "options": {
      "first": "Redux uses a custom side effect handling system.",
      "second": "Side effects in Redux are not handled.",
      "third": "Redux handles side effects using middleware, with 'redux-thunk' being a popular choice.",
      "fourth": "Side effects are managed directly within action creators."
    },
    "correctAnswer": "third"
  },
  {
    "id": 17,
    "question": "Explain the concept of 'Redux DevTools' and their significance in development.",
    "options": {
      "first": "Redux DevTools are used for handling side effects in a React component.",
      "second": "Redux DevTools are a styling framework for Redux components.",
      "third": "Redux DevTools provide a set of development tools that enable inspection and time-travel debugging of Redux applications.",
      "fourth": "Redux DevTools are exclusive to class components."
    },
    "correctAnswer": "third"
  },
  {
    "id": 18,
    "question": "What is the purpose of the 'reselect' library in the context of Redux?",
    "options": {
      "first": "reselect is used for handling side effects in a React component.",
      "second": "reselect is a middleware for handling asynchronous operations in Redux.",
      "third": "reselect is a library for creating memoized selectors to efficiently compute derived data from the Redux store.",
      "fourth": "reselect is a replacement for the 'useReducer' hook."
    },
    "correctAnswer": "third"
  },
  {
    "id": 19,
    "question": "Explain the role of the 'Redux middleware' in the Redux architecture.",
    "options": {
      "first": "Redux middleware is a deprecated feature in Redux.",
      "second": "Redux middleware is used for handling asynchronous operations in Redux.",
      "third": "Redux middleware is a component used for managing and updating global state in an application.",
      "fourth": "Redux middleware is only applicable to class components."
    },
    "correctAnswer": "second"
  },
  {
    "id": 20,
    "question": "How can you organize the Redux store and reducers in a larger application?",
    "options": {
      "first": "By using only one global reducer for the entire application.",
      "second": "By organizing reducers based on feature or domain, and combining them using 'combineReducers'.",
      "third": "By avoiding the use of middleware in Redux.",
      "fourth": "By not using Redux in larger applications."
    },
    "correctAnswer": "second"
  }
]
